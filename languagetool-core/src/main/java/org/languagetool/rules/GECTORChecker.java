/* LanguageTool, a natural language style checker
 * Copyright (C) 2015 Daniel Naber (http://www.danielnaber.de)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules;

import ai.djl.Model;
import ai.djl.inference.Predictor;
import ai.djl.repository.zoo.Criteria;
import ai.djl.training.util.ProgressBar;
import org.languagetool.AnalyzedSentence;
import org.languagetool.languagemodel.PythonTranslator;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple demo rule as an example for how to implement your own Java-based
 * rule in LanguageTool. Simple walks over the text and prints the words
 * and their analysis.
 *
 * <p>To activate this rule, add it to {@code getRelevantRules()} in e.g. {@code English.java}.
 *
 * <p>This rule works on sentences, extend {@link TextLevelRule} instead to work
 * on the complete text.
 */
public class GECTORChecker extends Rule {

  @Override
  public String getId() {
    return "GECTORChecker";  // a unique id that doesn't change over time
  }

  @Override
  public String getDescription() {
    return "Wrapper rule for the GECTOR LLM for error correction";  // shown in the configuration dialog
  }

  // This is the method with the error detection logic that you need to implement:
  @Override
  public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {

    System.out.println("GECTOR check");
    List<RuleMatch> ruleMatches = new ArrayList<>();

    PythonTranslator translator = new PythonTranslator(); // this is where the I/O pre- and postprocessing is defined!

    // TODO: get import path to work... all of these throw IllegalArgumentExceptions
    //String model_url = "jar:///org/languagetool/resource/gector_scripted.zip"; /// Resource not found: jar:///org/languagetool/resource/gector_scripted.zip
    String model_url = "jar:///org/languagetool/resource"; //Only archive file is supported for res URL.
    //String model_url = "jar:/org/languagetool/resource/gector_scripted.zip"; //Resource not found: jar:/org/languagetool/resource/gector_scripted.zip"
    //String model_url = "jar:/org/languagetool/resource"; // Only archive file is supported for res URL.

    // resolving over ModelName seems to work in the sense that it finds the files, but why does it not recognize it as an archive?

    Criteria criteria = Criteria.builder()
      .setTypes(String.class, String.class) // I / O types of the processing pipeline

      //.optModelPath(Paths.get("/org/languagetool/resource/gector_scripted.pt")) //supports .pt, but this does not work for loading models from a JAR file
      .optModelUrls(model_url)
      .optModelName("gector_scripted")
      //.optModelName("gector_scripted.zip") // same results

      .optTranslator(translator)
      .optProgress(new ProgressBar()).build();


    try {
      Model model = criteria.loadModel();
      Predictor<String, String> predictor = model.newPredictor(translator);
      String output = predictor.predict(sentence.getText());
      System.out.println(output + "GECTOR model loaded successfully!");

      //TODO: extract the nature of applied corrections from GECTOR output and pass it along in LT accordingly
      // - either here in this class, modifying the return object, or in some sort of wrapper that handles the RuleMatches with additional info generated by this class

      // actual beef of the GECTOR processing pipeline is in the Translator!

    } catch(Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }

    return toRuleMatchArray(ruleMatches);
  }

}
